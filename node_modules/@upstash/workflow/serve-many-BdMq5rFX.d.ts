import { k as PublicServeOptions, R as RouteFunction, t as InvokableWorkflow } from './types-D1W0VOpy.js';

type OmitOptionsInServeMany<TOptions> = Omit<TOptions, "env" | "url" | "schema" | "initialPayloadParser">;
declare const serveManyBase: <THandler extends (...params: any[]) => any, TOptions extends OmitOptionsInServeMany<PublicServeOptions> = OmitOptionsInServeMany<PublicServeOptions>, TServeParams extends [routeFunction: RouteFunction<any, any>, options: TOptions] = [routeFunction: RouteFunction<any, any>, options: TOptions]>({ workflows, getUrl, serveMethod, options, }: {
    workflows: Record<string, InvokableWorkflow<any, any>>;
    getUrl: (...params: Parameters<THandler>) => string;
    serveMethod: (...params: TServeParams) => THandler;
    options?: TOptions;
}) => {
    handler: (...params: Parameters<THandler>) => Promise<any>;
};

export { serveManyBase as s };
