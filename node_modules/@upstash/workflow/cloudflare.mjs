import {
  SDK_TELEMETRY,
  serveBase,
  serveManyBase
} from "./chunk-4GTHIL7S.mjs";

// platforms/cloudflare.ts
var getArgs = (args) => {
  if (!Array.isArray(args) || args.length === 0) {
    throw new Error("No arguments passed to serve handler");
  }
  if (typeof args[0] === "object" && "request" in args[0] && "env" in args[0]) {
    return {
      request: args[0].request,
      env: args[0].env
    };
  }
  if (args.length > 1 && typeof args[1] === "object") {
    return {
      request: args[0],
      env: args[1]
    };
  }
  throw new Error("Could not derive handler arguments from input. Please check how serve is used.");
};
var telemetry = {
  sdk: SDK_TELEMETRY,
  framework: "cloudflare"
};
var serve = (routeFunction, options) => {
  const fetch = async (...args) => {
    const { request, env } = getArgs(args);
    const { handler: serveHandler } = serveBase(routeFunction, telemetry, {
      env,
      ...options
    });
    return await serveHandler(request);
  };
  return { fetch };
};
var createWorkflow = (...params) => {
  const [routeFunction, options = {}] = params;
  return {
    workflowId: void 0,
    routeFunction,
    options
  };
};
var serveMany = (workflows, options) => {
  return {
    fetch: serveManyBase({
      workflows,
      getUrl(...params) {
        const { request } = getArgs(params);
        return request.url;
      },
      options,
      serveMethod: (...params) => serve(...params).fetch
    }).handler
  };
};
export {
  createWorkflow,
  serve,
  serveMany
};
